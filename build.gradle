// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    properties.keys().each {
        key -> project.ext.set(key, properties.getProperty(key))
    }
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "file:///Users/liumeng/Documents/Backup/maven"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0-beta5'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.7'
        classpath 'net.masonliu:helloplugin:1.0.9'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
//    println 'task clean(type: Delete)'
}

//1 测试添加属性
//task hello1 << {
//    println '-------'+name+'------'
//    println project.name
//    println project.nexusUsername
//    println nexusUsername
//    println project.nexusPwd
//    println nexusPwd
//    println '--------------------'
//}

// 2 task 创建
//task hello2 << {
//    println 'hello2'
//}
//
//task hello3 {
//    doLast {
//        println 'hello3'
//    }
//}
//
//task hello4 {
//    doFirst {
//        println 'hello4'
//    }
//}
//
//task hello5 {
//    println 'hello5'
//}
//
//tasks.create(name: 'hello7') << {
//    println 'hello7'
//}
//
//println 'hello6'
//
//buildscript {
//    println 'this is buildscript'
//}
//
//task hello8(dependsOn: hello7) << {
//    println 'hello8'
//}
//
//println 'task.size:'+tasks.size()

// 3 task 默认属性
//task hello9 << {
//    println name
//}
//
//task hello10 {
//    name = 'new hello10'
//    println name
//}
//
//hello10.configure {
//    description = "this is hello10"
//}
//
//task hello11 << {
//    println "hello10 name:" + hello10.name
//    println "hello10 description:" + hello10.description
//
//    description = "this is hello11"
//    println description
//}

//// Extension
//// Extensions are just plain objects, there is no interface/type
//class MyExtension {
//    String foo
//
//    MyExtension(String foo) {
//        this.foo = foo
//    }
//}
//
//// Add new extensions via the extension container
//project.extensions.create('custom', MyExtension, "bar")
////                       («name»,   «type»,       «constructor args», …)
//
//// extensions appear as properties on the target object by the given name
//assert project.custom instanceof MyExtension
//assert project.custom.foo == "bar"
//println project.custom.foo
//
//// also via a namespace method
//custom {
//    foo = "other111444"
//}
//println project.custom.foo
//
//// Extensions added with the extension container's create method are themselves extensible
//println project.custom instanceof ExtensionAware
//project.custom.extensions.create("nested", MyExtension, "baz")
//println project.custom.nested.foo
//
//// All extension aware objects have a special “ext” extension of type ExtraPropertiesExtension
//println project.hasProperty("myProperty") == false
//project.ext.myProperty = "myValue"
//
//// Properties added to the “ext” extension are promoted to the owning object
//println project.myProperty
//
//println project.extensions.findByName("custom").foo

//def gitVersion() {
//    println 'gitVersion()'
//    if (!System.getenv('CI_BUILD')) {
//        // don't care
//        return 1
//    }
//    def cmd = 'git rev-list HEAD --first-parent --count'
//    cmd.execute().text.trim().toInteger()
//}
//
//println gitVersion()